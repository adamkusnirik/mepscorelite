name: Deploy MEP Score to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  APP_NAME: mepscore
  LIGHTSAIL_REGION: eu-west-1
  DOMAIN: mepscore.eu
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm ci

      - name: Validate data structure
        run: |
          python -c "
          import sqlite3
          import os
          if os.path.exists('data/meps.db'):
              conn = sqlite3.connect('data/meps.db')
              cursor = conn.cursor()
              cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\"')
              tables = cursor.fetchall()
              print(f'Database contains {len(tables)} tables: {[t[0] for t in tables]}')
              conn.close()
          else:
              print('Database not found - will be created during deployment')
          "

      - name: Test Python server startup
        run: |
          timeout 10s python serve.py || true

  build:
    name: Build and Optimize
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          npm ci

      - name: Optimize JSON files
        run: |
          echo "Optimizing large JSON datasets..."
          python -c "
          import json
          import os
          from pathlib import Path
          
          # Optimize public data files
          data_dir = Path('public/data')
          if data_dir.exists():
              for json_file in data_dir.glob('*.json'):
                  print(f'Optimizing {json_file}...')
                  with open(json_file, 'r', encoding='utf-8') as f:
                      data = json.load(f)
                  
                  # Write minified version
                  with open(json_file, 'w', encoding='utf-8') as f:
                      json.dump(data, f, separators=(',', ':'), ensure_ascii=False)
                  
                  size_mb = os.path.getsize(json_file) / (1024 * 1024)
                  print(f'Optimized {json_file.name}: {size_mb:.2f} MB')
          "

      - name: Compress static assets
        run: |
          echo "Compressing CSS and JS files..."
          find public -name "*.css" -exec gzip -k9 {} \;
          find public -name "*.js" -exec gzip -k9 {} \;

      - name: Create deployment archive
        run: |
          echo "Creating deployment archive..."
          tar --exclude='node_modules' \
              --exclude='.git' \
              --exclude='*.tar.gz' \
              --exclude='coverage' \
              --exclude='logs' \
              --exclude='cache' \
              --exclude='venv' \
              -czf mepscore-deployment.tar.gz .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: mepscore-deployment
          path: mepscore-deployment.tar.gz
          retention-days: 30

  deploy:
    name: Deploy to AWS Lightsail
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ env.DOMAIN }}
    
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: mepscore-deployment

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
          chmod 600 ~/.ssh/lightsail_key
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Lightsail
        run: |
          echo "Deploying to AWS Lightsail..."
          
          # Upload deployment archive
          scp -i ~/.ssh/lightsail_key mepscore-deployment.tar.gz ubuntu@${{ secrets.LIGHTSAIL_HOST }}:/tmp/
          
          # Execute deployment on server
          ssh -i ~/.ssh/lightsail_key ubuntu@${{ secrets.LIGHTSAIL_HOST }} << 'EOF'
            set -e
            
            echo "Starting deployment process..."
            
            # Create backup
            sudo mkdir -p /var/backups/mepscore
            if [ -d "/var/www/mepscore" ]; then
              sudo tar -czf "/var/backups/mepscore/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C /var/www mepscore
              echo "Backup created successfully"
            fi
            
            # Create application directory
            sudo mkdir -p /var/www/mepscore
            
            # Extract new version
            cd /tmp
            tar -xzf mepscore-deployment.tar.gz
            sudo rm -rf /var/www/mepscore-new
            sudo mkdir -p /var/www/mepscore-new
            sudo cp -r * /var/www/mepscore-new/ 2>/dev/null || true
            sudo cp -r .[^.]* /var/www/mepscore-new/ 2>/dev/null || true
            
            # Preserve data directory if it exists
            if [ -d "/var/www/mepscore/data" ]; then
              sudo cp -r /var/www/mepscore/data /var/www/mepscore-new/
            fi
            
            # Preserve logs and cache if they exist
            if [ -d "/var/www/mepscore/logs" ]; then
              sudo cp -r /var/www/mepscore/logs /var/www/mepscore-new/
            fi
            
            # Atomic switch
            if [ -d "/var/www/mepscore" ]; then
              sudo mv /var/www/mepscore /var/www/mepscore-old
            fi
            sudo mv /var/www/mepscore-new /var/www/mepscore
            
            # Set permissions
            sudo chown -R www-data:www-data /var/www/mepscore
            sudo chmod -R 755 /var/www/mepscore
            
            # Update virtual environment
            cd /var/www/mepscore
            if [ ! -d "venv" ]; then
              sudo -u www-data python3 -m venv venv
            fi
            sudo -u www-data ./venv/bin/pip install --upgrade pip
            sudo -u www-data ./venv/bin/pip install -r requirements.txt
            
            # Run data processing if needed
            if [ ! -f "data/meps.db" ] && [ -f "backend/ingest_parltrack.py" ]; then
              echo "Running data ingestion..."
              sudo -u www-data ./venv/bin/python backend/ingest_parltrack.py
            fi
            
            if [ -f "backend/build_term_dataset.py" ]; then
              echo "Building term datasets..."
              sudo -u www-data ./venv/bin/python backend/build_term_dataset.py
            fi
            
            # Restart services
            sudo systemctl restart mepscore
            sleep 5
            sudo systemctl restart nginx
            
            # Verify deployment
            if sudo systemctl is-active --quiet mepscore && sudo systemctl is-active --quiet nginx; then
              echo "Deployment successful!"
              # Clean up old version
              sudo rm -rf /var/www/mepscore-old
            else
              echo "Deployment failed, rolling back..."
              sudo systemctl stop mepscore
              if [ -d "/var/www/mepscore-old" ]; then
                sudo mv /var/www/mepscore /var/www/mepscore-failed
                sudo mv /var/www/mepscore-old /var/www/mepscore
                sudo systemctl start mepscore
                sudo systemctl restart nginx
              fi
              exit 1
            fi
            
            # Cleanup
            rm -f /tmp/mepscore-deployment.tar.gz
            rm -rf /tmp/*mepscore*
            
            echo "Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          echo "Performing health checks..."
          
          # Wait for service to be fully ready
          sleep 30
          
          # Check HTTP response
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/api/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed - API responding correctly"
          else
            echo "❌ Health check failed - HTTP $response"
            exit 1
          fi
          
          # Check main page
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/ || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ Main page accessible"
          else
            echo "❌ Main page not accessible - HTTP $response"
            exit 1
          fi

      - name: Update deployment status
        run: |
          ssh -i ~/.ssh/lightsail_key ubuntu@${{ secrets.LIGHTSAIL_HOST }} << 'EOF'
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Deployment completed successfully" | sudo tee -a /var/log/mepscore-deployments.log
            sudo systemctl status mepscore --no-pager
            sudo systemctl status nginx --no-pager
          EOF

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/.ssh/lightsail_key

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 MEP Score deployment successful!"
          echo "✅ Application is live at https://${{ env.DOMAIN }}"
          echo "✅ Health checks passed"
          echo "✅ Services are running normally"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ MEP Score deployment failed!"
          echo "Please check the deployment logs and server status"
          exit 1